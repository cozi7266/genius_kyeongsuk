import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;


public class SWEA_1226_미로1 {
	public static class Node {
		int x;
		int y;
		public Node(int x, int y) {
			
			this.x = x;
			this.y = y;
		}
		public Node() {
			super();
			// TODO Auto-generated constructor stub
		}
	}
	static Node start;
	static int[][] map;
	static boolean[][] check;
	static int[] dx = {-1, 1, 0, 0};
	static int[] dy = {0, 0, -1, 1};
	public static void main(String[] args) {
		Scanner sc = new Scanner("1\r\n"
				+ "1111111111111111\r\n"
				+ "1210000000100011\r\n"
				+ "1010101110101111\r\n"
				+ "1000100010100011\r\n"
				+ "1111111010101011\r\n"
				+ "1000000010101011\r\n"
				+ "1011111110111011\r\n"
				+ "1010000010001011\r\n"
				+ "1010101111101011\r\n"
				+ "1010100010001011\r\n"
				+ "1010111010111011\r\n"
				+ "1010001000100011\r\n"
				+ "1011101111101011\r\n"
				+ "1000100000001311\r\n"
				+ "1111111111111111\r\n"
				+ "1111111111111111\r\n"
				+ "2\r\n"
				+ "1111111111111111\r\n"
				+ "1200000010000011\r\n"
				+ "1011111011111011\r\n"
				+ "1000001010000011\r\n"
				+ "1110101010111011\r\n"
				+ "1010101010100011\r\n"
				+ "1011111010111111\r\n"
				+ "1000001010000011\r\n"
				+ "1011101011111011\r\n"
				+ "1010101010000011\r\n"
				+ "1010101010111111\r\n"
				+ "1010100000130011\r\n"
				+ "1010111111111011\r\n"
				+ "1000000000000011\r\n"
				+ "1111111111111111\r\n"
				+ "1111111111111111\r\n"
				+ "3\r\n"
				+ "1111111111111111\r\n"
				+ "1210001000100011\r\n"
				+ "1010101010101011\r\n"
				+ "1000100010101011\r\n"
				+ "1011111110101011\r\n"
				+ "1000001010101011\r\n"
				+ "1111101010101011\r\n"
				+ "1010001000001011\r\n"
				+ "1010111111111011\r\n"
				+ "1010000000100011\r\n"
				+ "1011111110101111\r\n"
				+ "1000001010100011\r\n"
				+ "1011101010111011\r\n"
				+ "1000100000130011\r\n"
				+ "1111111111111111\r\n"
				+ "1111111111111111\r\n"
				+ "4\r\n"
				+ "1111111111111111\r\n"
				+ "1200100000000011\r\n"
				+ "1011101110111011\r\n"
				+ "1000001010101011\r\n"
				+ "1111111011101011\r\n"
				+ "1000100010000011\r\n"
				+ "1010101010111111\r\n"
				+ "1010001010001011\r\n"
				+ "1011111011101011\r\n"
				+ "1000100010100011\r\n"
				+ "1110101110111111\r\n"
				+ "1010100000130011\r\n"
				+ "1010111111111011\r\n"
				+ "1000000000000011\r\n"
				+ "1111111111111111\r\n"
				+ "1111111111111111\r\n"
				+ "5\r\n"
				+ "1111111111111111\r\n"
				+ "1210000000100011\r\n"
				+ "1010111011101011\r\n"
				+ "1010100010001011\r\n"
				+ "1011101010111011\r\n"
				+ "1000001010001011\r\n"
				+ "1111111011111011\r\n"
				+ "1000100010000011\r\n"
				+ "1011101010111011\r\n"
				+ "1010001000001011\r\n"
				+ "1010101011111111\r\n"
				+ "1010101000000011\r\n"
				+ "1010101110111011\r\n"
				+ "1000100010001311\r\n"
				+ "1111111111111111\r\n"
				+ "1111111111111111\r\n"
				+ "6\r\n"
				+ "1111111111111111\r\n"
				+ "1210001010000011\r\n"
				+ "1010101010111111\r\n"
				+ "1010100000100011\r\n"
				+ "1010111111101011\r\n"
				+ "1000100000001011\r\n"
				+ "1110101111111011\r\n"
				+ "1000100000001011\r\n"
				+ "1011101111101011\r\n"
				+ "1000101000101011\r\n"
				+ "1110101010111011\r\n"
				+ "1010100010100011\r\n"
				+ "1010111110101111\r\n"
				+ "1000000000100311\r\n"
				+ "1111111111111111\r\n"
				+ "1111111111111111\r\n"
				+ "7\r\n"
				+ "1111111111111111\r\n"
				+ "1210000000000011\r\n"
				+ "1011101111111011\r\n"
				+ "1000101010000011\r\n"
				+ "1110101010111011\r\n"
				+ "1000001000101011\r\n"
				+ "1010111111101111\r\n"
				+ "1010100000100011\r\n"
				+ "1011101110101111\r\n"
				+ "1000001000100011\r\n"
				+ "1111111011111011\r\n"
				+ "1000100010001011\r\n"
				+ "1010101110111011\r\n"
				+ "1010001300000011\r\n"
				+ "1111111111111111\r\n"
				+ "1111111111111111\r\n"
				+ "8\r\n"
				+ "1111111111111111\r\n"
				+ "1200000010000011\r\n"
				+ "1111111010111011\r\n"
				+ "1000000010001011\r\n"
				+ "1011111111111011\r\n"
				+ "1010000000000011\r\n"
				+ "1010111111101011\r\n"
				+ "1010000000001011\r\n"
				+ "1010111011111011\r\n"
				+ "1000100010001011\r\n"
				+ "1111111011101011\r\n"
				+ "1000001000100011\r\n"
				+ "1110111110101011\r\n"
				+ "1000000000101311\r\n"
				+ "1111111111111111\r\n"
				+ "1111111111111111\r\n"
				+ "9\r\n"
				+ "1111111111111111\r\n"
				+ "1200000000001011\r\n"
				+ "1011111111101011\r\n"
				+ "1000000010001011\r\n"
				+ "1111111010111011\r\n"
				+ "1000100010000011\r\n"
				+ "1011101111111011\r\n"
				+ "1010001000001011\r\n"
				+ "1010111011101011\r\n"
				+ "1010000010101311\r\n"
				+ "1011111110101111\r\n"
				+ "1000100000100011\r\n"
				+ "1011101011111011\r\n"
				+ "1000001000000011\r\n"
				+ "1111111111111111\r\n"
				+ "1111111111111111\r\n"
				+ "10\r\n"
				+ "1111111111111111\r\n"
				+ "1200001000100011\r\n"
				+ "1111101110101011\r\n"
				+ "1000100010001011\r\n"
				+ "1011101111101111\r\n"
				+ "1000100000000011\r\n"
				+ "1110111111101011\r\n"
				+ "1000000010001011\r\n"
				+ "1110111011101011\r\n"
				+ "1010001000001011\r\n"
				+ "1010101111111011\r\n"
				+ "1000101010000011\r\n"
				+ "1010101010101111\r\n"
				+ "1010100000100311\r\n"
				+ "1111111111111111\r\n"
				+ "1111111111111111");
		
		
		for (int tc = 1; tc <= 10; tc++) {
			
			map = new int[16][16];
			check = new boolean[16][16];
			
			sc.nextInt();
			for (int i = 0; i < 16; i++) {
				String string = sc.next();
				for (int j = 0; j < 16; j++) {
					map[i][j] = string.charAt(j) - '0';
					if(map[i][j] == 2) {
						start = new Node(i,j);
					}
				}
			}
			
			int result = bfs(start);
			System.out.println("#"+tc+" "+result);
		}		
	}

	private static int bfs(Node start) {
		Queue<Node> queue= new LinkedList<>();
		queue.offer(start);
		check[start.x][start.y] = true;
		
		while(!queue.isEmpty()) {
			Node node = queue.poll();
			for (int k = 0; k < 4; k++) {
				int nx = node.x + dx[k];
				int ny = node.y + dy[k];
				if(map[nx][ny] == 3) return 1;
				if(nx >= 0 && nx < 16 && ny >= 0 && ny < 16 && check[nx][ny] == false && map[nx][ny] == 0) {
					queue.offer(new Node(nx,ny));
					check[nx][ny] = true;
					
				}		
			}
		}
		return 0;
	}	
}
